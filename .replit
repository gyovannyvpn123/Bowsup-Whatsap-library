modules = ["python-3.11"]

[nix]
channel = "stable-24_05"

[deployment]
deploymentTarget = "autoscale"
run = ["gunicorn", "--bind", "0.0.0.0:5000", "main:app"]

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Start application"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "bocksup"

[[workflows.workflow]]
name = "Start application"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "gunicorn --bind 0.0.0.0:5000 --reuse-port --reload main:app"
waitForPort = 5000

[[workflows.workflow]]
name = "bocksup"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """
cd /home/runner/bocksup && python -c \"import bocksup; print(f'Bocksup version: {bocksup.__version__}'); print('Main modules:'); for module in dir(bocksup): 
    if not module.startswith('__'): 
        print(f'- {module}'); 
print('
Main features:'); 
print('- Authentication:', 'Available' if hasattr(bocksup, 'auth') else 'Not available');
print('- Messaging:', 'Available' if hasattr(bocksup, 'messaging') else 'Not available');
print('- Encryption:', 'Available' if hasattr(bocksup, 'encryption') else 'Not available');
print('- Groups:', 'Available' if hasattr(bocksup, 'groups') else 'Not available');
print('- Media handling:', 'Available' if hasattr(bocksup, 'media') else 'Not available');
print('- Registration:', 'Available' if hasattr(bocksup, 'registration') else 'Not available');\""""

[[workflows.workflow]]
name = "Test Suite"
author = 41017494
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "pytest tests/ -v"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python test_server_connection.py"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python analyze_protocol.py"

[[workflows.workflow]]
name = "Test Protocol Implementation"
author = 41017494
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "pytest tests/"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python test_server_connection.py --protocol-test"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python analyze_protocol.py --verify-implementation"

[[ports]]
localPort = 5000
externalPort = 80
